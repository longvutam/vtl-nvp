// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Radzen.Blazor.Rendering
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\c#\radzen-blazor\Radzen.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 1 "D:\c#\radzen-blazor\Radzen.Blazor\Rendering\GaugePointer.razor"
using Radzen.Blazor.Rendering;

#line default
#line hidden
    public partial class GaugePointer : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 6 "D:\c#\radzen-blazor\Radzen.Blazor\Rendering\GaugePointer.razor"
       
    [Parameter]
    public string Stroke { get; set; }

    [Parameter]
    public string Fill { get; set; }

    [Parameter]
    public double Radius { get; set; }

    [Parameter]
    public double StrokeWidth { get; set; }

    [Parameter]
    public double StartAngle { get; set; }

    [Parameter]
    public double EndAngle { get; set; }

    [Parameter]
    public double Min { get; set; }

    [Parameter]
    public double Max { get; set; }

    [Parameter]
    public double Width { get; set; }

    [Parameter]
    public double Length { get; set; }

    [Parameter]
    public Point Center { get; set; }

    [Parameter]

    public double Value { get; set; }

    private string Path { get; set; }

    double Clip(double v) => Math.Max(Min, Math.Min(v, Max));

    protected override void OnParametersSet()
    {
        var ratio = (Clip(Value) - Min) / (Max - Min);
        var angle = StartAngle + ratio * (EndAngle - StartAngle);

        angle = Polar.ToRadian(angle - 90);

        var value = Center.ToCartesian(Length, angle);
        var alpha = Center.ToCartesian(Width, angle - Math.PI / 2);
        var beta = Center.ToCartesian(Width, angle + Math.PI / 2);

        Path = $"M {value.Render()} L {alpha.Render()} L {beta.Render()} Z";
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
