#pragma checksum "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3dd915c5cd7475b037e8639254c6b6cdf378f676"
// <auto-generated/>
#pragma warning disable 1591
namespace Radzen.Blazor
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 2 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
using Microsoft.JSInterop;

#line default
#line hidden
    public partial class RadzenTooltip : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
#line 5 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
 foreach (var tooltip in tooltips)
{

#line default
#line hidden
            __builder.AddContent(0, "    ");
            __builder.OpenElement(1, "div");
            __builder.AddAttribute(2, "id", 
#line 7 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
              UniqueID

#line default
#line hidden
            );
            __builder.AddAttribute(3, "class", "rz-tooltip" + " " + (
#line 7 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
                                           tooltip.Options.CssClass

#line default
#line hidden
            ));
            __builder.AddAttribute(4, "style", "display: none; top: 0px; left: 0px; z-index: 1001; position: absolute;");
            __builder.AddMarkupContent(5, "\r\n        ");
            __builder.OpenElement(6, "div");
            __builder.AddAttribute(7, "class", "rz-tooltip-content" + " " + (
#line 8 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
                                        getCssClass(tooltip)

#line default
#line hidden
            ));
            __builder.AddAttribute(8, "style", 
#line 8 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
                                                                      tooltip.Options.Style

#line default
#line hidden
            );
            __builder.AddMarkupContent(9, "\r\n");
#line 9 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
             if (!string.IsNullOrEmpty(tooltip.Options.Text))
            {

#line default
#line hidden
            __builder.AddContent(10, "                ");
            __builder.OpenElement(11, "div");
            __builder.AddMarkupContent(12, "\r\n                    ");
#line 12 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
__builder.AddContent(13, (MarkupString)tooltip.Options.Text);

#line default
#line hidden
            __builder.AddMarkupContent(14, "\r\n                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(15, "\r\n");
#line 14 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
            }
            else if (tooltip.Options.ChildContent != null)
       {
        

#line default
#line hidden
#line 17 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
__builder.AddContent(16, tooltip.Options.ChildContent(Service));

#line default
#line hidden
#line 17 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
                                              
    }

#line default
#line hidden
            __builder.AddContent(17, "        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(18, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(19, "\r\n");
#line 21 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
}

#line default
#line hidden
        }
        #pragma warning restore 1998
#line 23 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\RadzenTooltip.razor"
       
    string getCssClass(Tooltip tooltip)
    {
        return $"rz-{Enum.GetName(typeof(TooltipPosition), tooltip.Options.Position).ToLower()}-tooltip-content";
    }

    public string UniqueID { get; set; }

    [Inject] private TooltipService Service { get; set; }

    List<Tooltip> tooltips = new List<Tooltip>();

    public async Task Open(ElementReference element, Type type, TooltipOptions options)
    {
        tooltips.Clear();
        tooltips.Add(new Tooltip() { Type = type, Options = options, Element = element });

        await InvokeAsync(() => { StateHasChanged(); });
    }

    bool IsJSRuntimeAvailable { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        IsJSRuntimeAvailable = true;

        var tooltip = tooltips.LastOrDefault();

        if (tooltip != null)
        {
            await JSRuntime.InvokeVoidAsync("Radzen.openTooltip",
                tooltip.Element,
                UniqueID,
                tooltip.Options.Duration,
                Enum.GetName(typeof(TooltipPosition), tooltip.Options.Position).ToLower());
        }
    }

    public async Task Close()
    {
        var lastTooltip = tooltips.LastOrDefault();
        if (lastTooltip != null)
        {
            tooltips.Remove(lastTooltip);
            await JSRuntime.InvokeVoidAsync("Radzen.closePopup", UniqueID);
        }

        await InvokeAsync(() => { StateHasChanged(); });
    }

    public void Dispose()
    {
        if (IsJSRuntimeAvailable)
        {
            JSRuntime.InvokeVoidAsync("Radzen.destroyPopup", UniqueID);
        }

        Service.OnOpen -= OnOpen;
        Service.OnClose -= OnClose;
        Service.OnNavigate -= OnNavigate;
    }

    protected override void OnInitialized()
    {
        UniqueID = Convert.ToBase64String(Guid.NewGuid().ToByteArray()).Replace("/", "-").Replace("+", "-").Substring(0, 10);

        Service.OnOpen += OnOpen;
        Service.OnClose += OnClose;
        Service.OnNavigate += OnNavigate;
    }

    void OnOpen(ElementReference element, Type type, TooltipOptions options)
    {
        Open(element, type, options).ConfigureAwait(false);
    }

    void OnClose()
    {
        Close().ConfigureAwait(false);
    }

    void OnNavigate()
    {
        JSRuntime.InvokeVoidAsync("Radzen.closePopup", UniqueID);
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
