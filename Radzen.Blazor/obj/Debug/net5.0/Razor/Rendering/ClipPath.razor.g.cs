#pragma checksum "D:\c#\blazor\vtl-nvp\Radzen.Blazor\Rendering\ClipPath.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "abca494b320235dfb5d7983dd48bbe99b04d5c3a"
// <auto-generated/>
#pragma warning disable 1591
namespace Radzen.Blazor.Rendering
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\c#\blazor\vtl-nvp\Radzen.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
    public partial class ClipPath : RadzenChartComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "defs");
            __builder.AddMarkupContent(1, "\r\n    ");
            __builder.OpenElement(2, "clipPath");
            __builder.AddAttribute(3, "id", 
#line 3 "D:\c#\blazor\vtl-nvp\Radzen.Blazor\Rendering\ClipPath.razor"
                   Chart.ClipPath

#line default
#line hidden
            );
            __builder.AddMarkupContent(4, "\r\n        ");
            __builder.OpenElement(5, "path");
            __builder.AddAttribute(6, "d", 
#line 4 "D:\c#\blazor\vtl-nvp\Radzen.Blazor\Rendering\ClipPath.razor"
                  Path

#line default
#line hidden
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(7, "\r\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(8, "\r\n");
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#line 7 "D:\c#\blazor\vtl-nvp\Radzen.Blazor\Rendering\ClipPath.razor"
       
    string Path { get; set; }

    protected override void Initialize()
    {
        var categoryTicks = Chart.CategoryScale.Ticks(Chart.CategoryAxis.TickDistance);
        var valueTicks = Chart.ValueScale.Ticks(Chart.ValueAxis.TickDistance);

        var x1 = Chart.CategoryScale.Scale(categoryTicks.Start).ToInvariantString();
        var x2 = Chart.CategoryScale.Scale(categoryTicks.End).ToInvariantString();

        var y1 = Chart.ValueScale.Scale(valueTicks.Start).ToInvariantString();
        var y2 = Chart.ValueScale.Scale(valueTicks.End).ToInvariantString();

        Path = $"M {x1} {y1} L {x2} {y1} L {x2} {y2} L {x1} {y2}";
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
