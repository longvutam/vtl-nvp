// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Radzen.Blazor.Rendering
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
    public partial class ValueAxis : RadzenChartComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 37 "C:\Users\owlsn\Source\Repos\vtl-nvp\Radzen.Blazor\Rendering\ValueAxis.razor"
       
    double start;
    double end;
    double step;
    double x1;
    double x2;
    double y1;
    double y2;
    private AxisBase XAxis { get; set; }
    private AxisBase YAxis { get; set; }

    protected override void OnParametersSet()
    {
        YAxis = Chart.ValueAxis;
        XAxis = Chart.CategoryAxis;

        if (Chart.ShouldInvertAxes())
        {
            YAxis = Chart.CategoryAxis;
            XAxis = Chart.ValueAxis;
        }

        var ticks = Chart.ValueScale.Ticks(YAxis.TickDistance);
        start = ticks.Start;
        end = ticks.End;
        step = ticks.Step;

        var categoryTicks = Chart.CategoryScale.Ticks(XAxis.TickDistance);
        x1 = Chart.CategoryScale.Scale(categoryTicks.Start);
        x2 = Chart.CategoryScale.Scale(categoryTicks.End);
        y1 = Chart.ValueScale.Scale(start);
        y2 = Chart.ValueScale.Scale(end);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
