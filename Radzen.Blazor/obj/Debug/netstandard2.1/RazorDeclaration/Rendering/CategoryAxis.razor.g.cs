// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Radzen.Blazor.Rendering
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\c#\blazor\vtl-nvp\Radzen.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
    public partial class CategoryAxis : RadzenChartComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 38 "D:\c#\blazor\vtl-nvp\Radzen.Blazor\Rendering\CategoryAxis.razor"
       
    decimal start;
    decimal end;
    decimal step;
    double x1;
    double x2;
    double y1;
    double y2;

    private AxisBase XAxis { get; set; }
    private AxisBase YAxis { get; set; }

    protected override void OnParametersSet()
    {
        XAxis = Chart.CategoryAxis;
        YAxis = Chart.ValueAxis;

        if (Chart.ShouldInvertAxes())
        {
            XAxis = Chart.ValueAxis;
            YAxis = Chart.CategoryAxis;
        }

        var ticks = Chart.CategoryScale.Ticks(XAxis.TickDistance);
        start = (decimal)ticks.Start;
        end = (decimal)ticks.End;
        step = (decimal)ticks.Step;

        x1 = Chart.CategoryScale.Scale(ticks.Start);
        x2 = Chart.CategoryScale.Scale(ticks.End);

        var valueTicks = Chart.ValueScale.Ticks(YAxis.TickDistance);
        y1 = Chart.ValueScale.Scale(valueTicks.Start);
        y2 = Chart.ValueScale.Scale(valueTicks.End);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
